// main.js - A simplified example
// ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á @line/liff ‡∏ú‡πà‡∏≤‡∏ô npm (‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ CDN ‡πÅ‡∏ó‡∏ô), ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
// import liff from '@line/liff'; 

const LIFF_ID = '2007522746-g2a1qOPj'; // <<< ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô LIFF ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE Developers Console
const API_BASE_URL = 'http://localhost:3000'; // <<< ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Backend API ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

async function initializeLiff() {
    try {
        await liff.init({ liffId: LIFF_ID });
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!liff.isInClient() && !liff.isLoggedIn()) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            liff.login();
            return;
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        const profile = await liff.getProfile();
        document.getElementById('user-display-name').textContent = profile.displayName;
        document.getElementById('profile-picture').src = profile.pictureUrl;
        document.getElementById('profile').style.display = 'flex';

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        setupForms();
        loadTickets();

    } catch (err) {
        console.error('LIFF initialization failed', err);
        document.getElementById('liff-app').innerHTML = `
            <p style="color: red; text-align: center;">
                Error: Could not initialize LIFF. <br>
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LIFF ID ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï<br>
                Error details: ${err.message}
            </p>`;
    }
}

async function setupForms() {
    const form = document.getElementById('create-ticket-form');
    if (!form) return;

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            const formData = {
                date: document.getElementById('date').value,
                time: document.getElementById('time').value,
                location: document.getElementById('location').value,
                maxPlayers: parseInt(document.getElementById('max-players').value),
                details: document.getElementById('details').value
            };

            // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å LIFF
            const accessToken = liff.getAccessToken();
            if (!accessToken) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á LIFF Access Token ‡πÑ‡∏î‡πâ');
            }

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
            const response = await fetch(`${API_BASE_URL}/tickets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${accessToken}`
                },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ');
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            alert('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            form.reset();
            loadTickets();

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE)
            if (liff.isInClient()) {
                await liff.sendMessages([
                    {
                        type: 'text',
                        text: `üè∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà!\nüìç ${formData.location}\nüìÖ ${formData.date} ${formData.time}\nüë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${formData.maxPlayers} ‡∏Ñ‡∏ô\n\n${formData.details}`
                    }
                ]);
            }

        } catch (err) {
            console.error('Error creating ticket:', err);
            alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
        }
    });
}

async function loadTickets() {
    const ticketList = document.getElementById('ticket-list');
    if (!ticketList) return;

    try {
        const accessToken = liff.getAccessToken();
        const response = await fetch(`${API_BASE_URL}/tickets`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏î‡πâ');
        }

        const tickets = await response.json();
        
        if (tickets.length === 0) {
            ticketList.innerHTML = '<p style="text-align: center;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà</p>';
            return;
        }

        ticketList.innerHTML = tickets.map(ticket => `
            <div class="ticket-item">
                <h3>${ticket.location}</h3>
                <p>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(ticket.date).toLocaleDateString('th-TH')}</p>
                <p>‚åö ‡πÄ‡∏ß‡∏•‡∏≤: ${ticket.time}</p>
                <p>üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: ${ticket.joinedPlayers.length}/${ticket.maxPlayers}</p>
                <p>üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${ticket.details || '-'}</p>
                <button onclick="joinTicket('${ticket._id}')" class="join-btn">‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</button>
                <button onclick="viewPlayers('${ticket._id}')" class="view-players-btn">‡∏î‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô</button>
                <div id="players-${ticket._id}" class="players-list" style="display: none;"></div>
            </div>
        `).join('');

    } catch (err) {
        console.error('Error loading tickets:', err);
        ticketList.innerHTML = `
            <p style="color: red; text-align: center;">
                ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß<br>
                Error: ${err.message}
            </p>`;
    }
}

async function joinTicket(ticketId) {
    try {
        const accessToken = liff.getAccessToken();
        const response = await fetch(`${API_BASE_URL}/tickets/${ticketId}/join`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ');
        }

        alert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        loadTickets();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô LINE)
        if (liff.isInClient()) {
            const ticket = await response.json();
            await liff.sendMessages([
                {
                    type: 'text',
                    text: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\nüìç ${ticket.location}\nüìÖ ${new Date(ticket.date).toLocaleDateString('th-TH')} ${ticket.time}`
                }
            ]);
        }

    } catch (err) {
        console.error('Error joining ticket:', err);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    }
}

async function viewPlayers(ticketId) {
    const playersList = document.getElementById(`players-${ticketId}`);
    if (!playersList) return;

    if (playersList.style.display === 'block') {
        playersList.style.display = 'none';
        return;
    }

    try {
        const accessToken = liff.getAccessToken();
        const response = await fetch(`${API_BASE_URL}/tickets/${ticketId}/players`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        if (!response.ok) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ');
        }

        const players = await response.json();
        
        playersList.innerHTML = `
            <h4>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:</h4>
            ${players.length === 0 ? '<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</p>' : `
                <ul>
                    ${players.map(player => `
                        <li>
                            <img src="${player.pictureUrl || 'https://via.placeholder.com/30'}" 
                                 width="30" height="30" 
                                 style="border-radius:50%; vertical-align: middle; margin-right: 5px;">
                            ${player.displayName}
                        </li>
                    `).join('')}
                </ul>
            `}
        `;
        playersList.style.display = 'block';

    } catch (err) {
        console.error('Error loading players:', err);
        playersList.innerHTML = `
            <p style="color: red;">
                ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô<br>
                Error: ${err.message}
            </p>`;
        playersList.style.display = 'block';
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', initializeLiff); 